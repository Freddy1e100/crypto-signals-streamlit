import streamlit as st import pandas as pd import datetime import plotly.graph_objects as go from binance.client import Client from ta.momentum import RSIIndicator, StochRSIIndicator from ta.trend import EMAIndicator

Binance client (–±–µ–∑ –∫–ª—é—á–µ–π, —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)

client = Client()

–ù–∞—Å—Ç—Ä–æ–π–∫–∏

PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "PAXGUSDT"] INTERVAL = Client.KLINE_INTERVAL_1H LIMIT = 100

st.set_page_config(page_title="–ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã", layout="wide") st.title("üìà –ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã (Binance)") st.markdown("–ü–æ–ª—É—á–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º.")

–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö

def analyze_symbol(symbol): klines = client.get_klines(symbol=symbol, interval=INTERVAL, limit=LIMIT) df = pd.DataFrame(klines, columns=["timestamp", "o", "h", "l", "c", "v", "C", "Q", "n", "TakerBaseVol", "TakerQuoteVol", "Ignore"]) df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms") df.set_index("timestamp", inplace=True) df = df[["o", "h", "l", "c"]].astype(float) df.rename(columns={"o": "Open", "h": "High", "l": "Low", "c": "Close"}, inplace=True)

if df.empty or len(df) < 50:
    return None, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", None

df["EMA50"] = EMAIndicator(df["Close"], window=50).ema_indicator()
df["RSI"] = RSIIndicator(df["Close"]).rsi()
df["StochRSI"] = StochRSIIndicator(df["Close"]).stochrsi()

last = df.iloc[-1]
price = round(last["Close"], 2)
now = df.index[-1].strftime("%Y-%m-%d %H:%M")

# –°–∏–≥–Ω–∞–ª—ã
if last["Close"] > last["EMA50"] and last["RSI"] > 50 and last["StochRSI"] > 0.8:
    signal = "‚úÖ LONG"
elif last["Close"] < last["EMA50"] and last["RSI"] < 50 and last["StochRSI"] < 0.2:
    signal = "üîª SHORT"
else:
    signal = "‚ûñ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞"

# –£—Ä–æ–≤–Ω–∏
stop = round(price * 0.98, 2)
take = round(price * 1.04, 2) if "LONG" in signal else round(price * 0.96, 2)

# –ì—Ä–∞—Ñ–∏–∫
fig = go.Figure()
fig.add_trace(go.Candlestick(x=df.index, open=df.Open, high=df.High, low=df.Low, close=df.Close, name="–¶–µ–Ω–∞"))
fig.add_trace(go.Scatter(x=df.index, y=df["EMA50"], line=dict(color="orange"), name="EMA50"))
fig.update_layout(margin=dict(t=20, b=0), height=400, showlegend=True)

info = f"{signal}\n‚è± {now}\nüí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {price}\nüìç –°—Ç–æ–ø: {stop}\nüìç –¢–µ–π–∫: {take}"
return fig, info, df

–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ

for symbol in PAIRS: st.subheader(symbol.replace("USDT", "/USDT")) fig, info, df = analyze_symbol(symbol) if df is None: st.warning(info) else: st.plotly_chart(fig, use_container_width=True) st.text(info)

