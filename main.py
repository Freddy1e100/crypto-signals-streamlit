import streamlit as st
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
from binance.client import Client
from ta.trend import EMAIndicator
from ta.momentum import RSIIndicator, StochRSIIndicator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Binance (–ø—É–±–ª–∏—á–Ω—ã–µ, –±–µ–∑ –∫–ª—é—á–∞)
client = Client()

# –ü–∞—Ä—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
PAIRS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "PAXGUSDT"]
SYMBOL_NAMES = {
    "BTCUSDT": "BTC/USDT",
    "ETHUSDT": "ETH/USDT",
    "SOLUSDT": "SOL/USDT",
    "PAXGUSDT": "PAXG/USDT"
}
TIMEFRAME = "1h"
LIMIT = 150

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ Streamlit
st.title("üìà –ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã (Binance)")
st.markdown("–ü–æ–ª—É—á–∞–π –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º.")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def get_binance_data(symbol, interval="1h", limit=150):
    try:
        klines = client.get_klines(symbol=symbol, interval=interval, limit=limit)
        df = pd.DataFrame(klines, columns=[
            "Open Time", "Open", "High", "Low", "Close", "Volume",
            "Close Time", "Quote Asset Volume", "Number of Trades",
            "Taker Buy Base", "Taker Buy Quote", "Ignore"
        ])
        df["Open Time"] = pd.to_datetime(df["Open Time"], unit="ms")
        df.set_index("Open Time", inplace=True)
        df = df[["Open", "High", "Low", "Close", "Volume"]].astype(float)
        return df
    except Exception as e:
        return None

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–≤–æ–¥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
def analyze(df, symbol):
    try:
        ema = EMAIndicator(close=df["Close"], window=50)
        df["EMA50"] = ema.ema_indicator()

        rsi = RSIIndicator(close=df["Close"])
        df["RSI"] = rsi.rsi()

        stoch = StochRSIIndicator(close=df["Close"])
        df["StochRSI"] = stoch.stochrsi()

        df.dropna(inplace=True)
        last = df.iloc[-1]

        signal = "‚è∏Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        if last["RSI"] < 30 and last["StochRSI"] < 0.2 and last["Close"] > last["EMA50"]:
            signal = "‚úÖ LONG"
        elif last["RSI"] > 70 and last["StochRSI"] > 0.8 and last["Close"] < last["EMA50"]:
            signal = "üîª SHORT"

        entry_price = round(last["Close"], 2)
        stop_loss = round(entry_price * (0.97 if signal == "‚úÖ LONG" else 1.03), 2)
        take_profit = round(entry_price * (1.03 if signal == "‚úÖ LONG" else 0.97), 2)

        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(6, 3))
        df["Close"].plot(ax=ax, label="–¶–µ–Ω–∞")
        df["EMA50"].plot(ax=ax, label="EMA50")
        ax.set_title(f"{SYMBOL_NAMES[symbol]} - –¶–µ–Ω–∞ –∏ EMA50")
        ax.legend()
        st.pyplot(fig)

        # –°–∏–≥–Ω–∞–ª
        st.markdown(f"### {SYMBOL_NAMES[symbol]}")
        st.write(f"{signal}")
        st.write(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: {df.index[-1]}")
        st.write(f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}")
        st.write(f"üìç –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss}")
        st.write(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit}")

    except Exception as e:
        st.markdown(f"### {SYMBOL_NAMES[symbol]}")
        st.error(f"–û—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥
for pair in PAIRS:
    df = get_binance_data(pair, interval=TIMEFRAME, limit=LIMIT)
    if df is None or len(df) < 60:
        st.markdown(f"### {SYMBOL_NAMES[pair]}")
        st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
    else:
        analyze(df, pair)
